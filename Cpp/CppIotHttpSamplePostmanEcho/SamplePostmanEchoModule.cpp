///////////////////////////////////////////////////////////////////////////////
// SamplePostmanEchoModule.cpp
#include "TcPch.h"
#pragma hdrstop

#include "SamplePostmanEchoModule.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif
DEFINE_THIS_FILE()

///////////////////////////////////////////////////////////////////////////////
// Collection of interfaces implemented by module CSamplePostmanEchoModule
BEGIN_INTERFACE_MAP(CSamplePostmanEchoModule)
	INTERFACE_ENTRY_ITCOMOBJECT()
	INTERFACE_ENTRY(IID_ITcADI, ITcADI)
	INTERFACE_ENTRY(IID_ITcWatchSource, ITcWatchSource)
///<AutoGeneratedContent id="InterfaceMap">
	INTERFACE_ENTRY(IID_ITcCyclic, ITcCyclic)
	INTERFACE_ENTRY(IID_ITcIotHttpResponse, ITcIotHttpResponse)
///</AutoGeneratedContent>
END_INTERFACE_MAP()


IMPLEMENT_ITCOMOBJECT(CSamplePostmanEchoModule)
IMPLEMENT_ITCOMOBJECT_SETSTATE_LOCKOP2(CSamplePostmanEchoModule)
IMPLEMENT_ITCADI(CSamplePostmanEchoModule)
IMPLEMENT_ITCWATCHSOURCE(CSamplePostmanEchoModule)

///////////////////////////////////////////////////////////////////////////////
// Set parameters of CSamplePostmanEchoModule 
BEGIN_SETOBJPARA_MAP(CSamplePostmanEchoModule)
	SETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="SetObjectParameterMap">
	SETOBJPARA_VALUE(PID_SamplePostmanEchoModulesendHttpPostRequest, m_sendHttpPostRequest)
	SETOBJPARA_VALUE(PID_SamplePostmanEchoModulevalidMessageReceivedCnt, m_validMessageReceivedCnt)
	SETOBJPARA_VALUE(PID_SamplePostmanEchoModulestatusCode, m_statusCode)
	SETOBJPARA_VALUE(PID_SamplePostmanEchoModuleerrorCnt, m_errorCnt)
	SETOBJPARA_VALUE(PID_SamplePostmanEchoModulecontent, m_content)
	SETOBJPARA_ITFPTR(PID_SamplePostmanEchoModuleHttpClient, m_spHttpClient)
	SETOBJPARA_ITFPTR(PID_SamplePostmanEchoModuleCyclicCaller, m_spCyclicCaller)
///</AutoGeneratedContent>
END_SETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get parameters of CSamplePostmanEchoModule 
BEGIN_GETOBJPARA_MAP(CSamplePostmanEchoModule)
	GETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="GetObjectParameterMap">
	GETOBJPARA_VALUE(PID_SamplePostmanEchoModulesendHttpPostRequest, m_sendHttpPostRequest)
	GETOBJPARA_VALUE(PID_SamplePostmanEchoModulevalidMessageReceivedCnt, m_validMessageReceivedCnt)
	GETOBJPARA_VALUE(PID_SamplePostmanEchoModulestatusCode, m_statusCode)
	GETOBJPARA_VALUE(PID_SamplePostmanEchoModuleerrorCnt, m_errorCnt)
	GETOBJPARA_VALUE(PID_SamplePostmanEchoModulecontent, m_content)
	GETOBJPARA_ITFPTR(PID_SamplePostmanEchoModuleHttpClient, m_spHttpClient)
	GETOBJPARA_ITFPTR(PID_SamplePostmanEchoModuleCyclicCaller, m_spCyclicCaller)
///</AutoGeneratedContent>
END_GETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get watch entries of CSamplePostmanEchoModule
BEGIN_OBJPARAWATCH_MAP(CSamplePostmanEchoModule)
	OBJPARAWATCH_DATAAREA_MAP()
///<AutoGeneratedContent id="ObjectParameterWatchMap">
///</AutoGeneratedContent>
END_OBJPARAWATCH_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get data area members of CSamplePostmanEchoModule
BEGIN_OBJDATAAREA_MAP(CSamplePostmanEchoModule)
///<AutoGeneratedContent id="ObjectDataAreaMap">
///</AutoGeneratedContent>
END_OBJDATAAREA_MAP()


///////////////////////////////////////////////////////////////////////////////
// Constructor
CSamplePostmanEchoModule::CSamplePostmanEchoModule()
{
///<AutoGeneratedContent id="MemberInitialization">
	m_sendHttpPostRequest = FALSE;
	m_validMessageReceivedCnt = 0;
	m_statusCode = 0;
	m_errorCnt = 0;
	memset(&m_content, 0, sizeof(m_content));
///</AutoGeneratedContent>

	m_cntRequest = 0;
	m_prevSendHttpPostRequest = false;
}

///////////////////////////////////////////////////////////////////////////////
// Destructor
CSamplePostmanEchoModule::~CSamplePostmanEchoModule() 
{
}

///////////////////////////////////////////////////////////////////////////////
// State Transitions 
///////////////////////////////////////////////////////////////////////////////
IMPLEMENT_ITCOMOBJECT_SETOBJSTATE_IP_PI(CSamplePostmanEchoModule)

///////////////////////////////////////////////////////////////////////////////
// State transition from PREOP to SAFEOP
//
// Initialize input parameters 
// Allocate memory
HRESULT CSamplePostmanEchoModule::SetObjStatePS(PTComInitDataHdr pInitData)
{
	HRESULT hr = S_OK;
	IMPLEMENT_ITCOMOBJECT_EVALUATE_INITDATA(pInitData);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to OP
//
// Register with other TwinCAT objects
HRESULT CSamplePostmanEchoModule::SetObjStateSO()
{
	HRESULT hr = S_OK;

	if (m_spHttpClient.HasOID())
		hr = m_spSrv->TcQuerySmartObjectInterface(m_spHttpClient);
	else
		hr = ADS_E_INVALIDPARM;

	hr = FAILED(hr) ? hr : AddModuleToCaller();

	// Cleanup if transition failed at some stage
	if (FAILED(hr))
	{
		RemoveModuleFromCaller();
		m_spHttpClient = NULL;
	}

	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from OP to SAFEOP
HRESULT CSamplePostmanEchoModule::SetObjStateOS()
{
	HRESULT hr= S_OK;
	m_spHttpClient->HttpDisconnect(true);

	RemoveModuleFromCaller();
	m_spHttpClient = NULL;
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to PREOP
HRESULT CSamplePostmanEchoModule::SetObjStateSP()
{
	HRESULT hr = S_OK;
	return hr;
}

///<AutoGeneratedContent id="ImplementationOf_ITcCyclic">
HRESULT CSamplePostmanEchoModule::CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context)
{
	HRESULT hr = E_NOTIMPL;
	ETcIotSocketState socketState;
	
	if (m_sendHttpPostRequest /*&& !m_prevSendHttpPostRequest*/)
	{
		char sContent[32];
		snprintf(sContent, 32, "msg:%d", ++m_cntRequest);
		ULONG invokeId;
		m_statusCode = 0;

		if (FAILED(hr = m_spHttpClient->HttpSendRequest(ETcIotHttpRequestType::HTTP_POST, "/post", sContent, strlen(sContent) + 1, NULL, 0, THIS_CAST(ITcIotHttpResponse), NULL, 2, invokeId)))
		{
			m_errorCnt++;
		}
	}

	m_spHttpClient->HttpExecute(&socketState);
	m_prevSendHttpPostRequest = m_sendHttpPostRequest;
	return hr;
}
///</AutoGeneratedContent>

///<AutoGeneratedContent id="ImplementationOf_ITcIotHttpResponse">
HRESULT CSamplePostmanEchoModule::OnHttpResponse(ULONG nInvokeId, ITcIotHttpResponseData* ipResponse)
{
	PVOID content;
	ULONG nContent;
	if (SUCCEEDED(ipResponse->HttpGetResponseData(content, nContent, m_statusCode, NULL)))
	{
		if (m_statusCode >= 200 && m_statusCode < 300)
		{
			if (nContent > 0)
			{
				m_validMessageReceivedCnt++;
				strncpy(m_content, (char*)content, sizeof(m_content) - 1);
			}
			else
			{
				m_errorCnt++;
			}
		}
		else
		{
			m_errorCnt++;
		}
	}
	else
	{
		m_errorCnt++;
	}
	return S_OK;
}

HRESULT CSamplePostmanEchoModule::OnHttpRequestFailed(ULONG nInvokeId, ETcIotHttpRequestError eErrorId)
{
	
	m_errorCnt++;
	return S_OK;
}
///</AutoGeneratedContent>

///////////////////////////////////////////////////////////////////////////////
HRESULT CSamplePostmanEchoModule::AddModuleToCaller()
{
	
	HRESULT hr = S_OK;
	if (m_spCyclicCaller.HasOID())
	{
		if (SUCCEEDED_DBG(hr = m_spSrv->TcQuerySmartObjectInterface(m_spCyclicCaller)))
		{
			if (FAILED(hr = m_spCyclicCaller->AddModule(m_spCyclicCaller, THIS_CAST(ITcCyclic))))
			{
				m_spCyclicCaller = NULL;
			}
		}
	}
	else
	{
		hr = ADS_E_INVALIDOBJID;
		SUCCEEDED_DBGT(hr, "Invalid OID specified for caller task");
	}

	return hr;
}

///////////////////////////////////////////////////////////////////////////////
VOID CSamplePostmanEchoModule::RemoveModuleFromCaller()
{	
	if (m_spCyclicCaller)
	{
		m_spCyclicCaller->RemoveModule(m_spCyclicCaller);
	}
	m_spCyclicCaller = NULL;

}
